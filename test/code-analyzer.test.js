import assert from 'assert';
import {parseCode} from '../src/js/code-analyzer';

describe('The javascript parser', () => {    it('test1', () => {        assert.equal(parseCode('function foo(x){\n' +            'return x;\n' +            '}\n','3'),        '<p><br>function foo(x){<br/><br>return x;<br/><br>}<br/><p/>'        );});
    it('test2', () => {        assert.equal(parseCode('function foo(x, y, z){\n' +            '    let a = x + 1;\n' +            '    let b = a + y;\n' +            '    let c = 0;\n' +            '    \n' +            '    if (b < z) {\n' +            '        c = c + 5;\n' +            '        return x + y + z + c;\n' +            '    } else if (b < z * 2) {\n' +            '        c = c + x + 5;\n' +            '        return x + y + z + c;\n' +            '    } \n' +            '}\n','1|2|3'),        '<p><br>function foo(x, y, z){<br/> <br> <mark style="background-color:red;">    if (x + 1 + y < z) {</mark> <br/><br>        return x + y + z + ( 5 );<br/><br>  <mark style="background-color:green;">    } else if (x + 1 + y < z * 2) {</mark> <br/><br>        return x + y + z + ( x + 5 );<br/><br>    } <br/><br>}<br/><p/>'        );});
    it('test3', () => {        assert.equal(parseCode('function foo(x, y, z){\n' +            '    let a = x + 1;\n' +            '    let b = a + y;\n' +            '    let c = 0;\n' +            '    \n' +            '    while (a < z) {\n' +            '        c = a + b;\n' +            '        z = c * 2;\n' +            '    }\n' +            '    \n' +            '    return z;\n' +            '}\n','1|2|3'),        '<p><br>function foo(x, y, z){<br/><br>    while (x + 1 < z) {<br/><br>        z =( ( x + 1 + x + 1 + y ) * 2 )<br/><br>    }<br/><br>    return z;<br/><br>}<br/><p/>'        );});
    it('test4', () => {        assert.equal(parseCode('let x;',''),            '<p><p/>'        );});
    it('test5', () => {        assert.equal(parseCode('let t=3;\n' +            'function foo(){\n' +            'return t;\n' +            '}',''),        '<p><br>function foo(){<br/><br>return 3;<br/><br>}<br/><p/>'        );});
    it('test6', () => {        assert.equal(parseCode('function foo(){\n' +            'let y;\n' +            '}',''),        '<p><br>function foo(){<br/><br>}<br/><p/>'        );});
    it('test7', () => {        assert.equal(parseCode('function foo(x, y, z){\n' +            '    let a = x + 1;\n' +            '    let b = a + y;\n' +            '    let c = 0;\n' +            '    \n' +            '    if (b < z) {\n' +            '        c = c + 5;\n' +            '        return x + y + z + c;\n' +            '   }\n' +            '}\n','1|2|3'),        '<p><br>function foo(x, y, z){<br/> <br> <mark style="background-color:red;">    if (x + 1 + y < z) {</mark> <br/><br>        return x + y + z + ( 5 );<br/><br>   }<br/><br>}<br/><p/>'        );});
    it('test8', () => {        assert.equal(parseCode('function foo(x, y, z){\n' +            '    let a = x + 1;\n' +            '    let b = a + y;\n' +            '    let c = 0;\n' +            'c=2;\n' +            '    \n' +            '    if (b < z) {\n' +            '        c = c + 5;\n' +            '        return x + y + z + c;\n' +            '   }\n' +            '}\n','1|2|3'),        '<p><br>function foo(x, y, z){<br/> <br> <mark style="background-color:red;">    if (x + 1 + y < z) {</mark> <br/><br>        return x + y + z + ( ( 2 ) + 5 );<br/><br>   }<br/><br>}<br/><p/>'        );});
    it('test9', () => {        assert.equal(parseCode('function foo(x, y, z){\n' +            '    let a = x + 1;\n' +            '    let b = a + y;\n' +            '    let c = 0;\n' +            'c=2;\n' +            '    \n' +            '    if (b < z) {\n' +            'while(x==1){\n' +            '\n' +            'c=3;\n' +            '}\n' +            '        c = c + 5;\n' +            '        return x + y + z + c;\n' +            '   }\n' +            '}\n','1|2|3'),        '<p><br>function foo(x, y, z){<br/> <br> <mark style="background-color:red;">    if (x + 1 + y < z) {</mark> <br/><br>while(x == 1){<br/><br>}<br/><br>        return x + y + z + ( ( 2 ) + 5 );<br/><br>   }<br/><br>}<br/><p/>'        );});
    it('test10', () => {        assert.equal(parseCode('function foo(x, y, z){\n' +            '    let a = x + 1;\n' +            '    let b = a + y;\n' +            '    let c = 0 + 0;\n' +            '    \n' +            '    if (b < z) {\n' +            '        c = c + 5;\n' +            '        return x + y + z + c;\n' +            '    } else if (b < z * 2) {\n' +            '        c = c + x + 5;\n' +            '        return x + y + z + c;\n' +            '    } else {\n' +            '        c = c + z + 5;\n' +            '        return x + y + z + c;\n' +            '    }\n' +            '}\n','1|2|3'),        '<p><br>function foo(x, y, z){<br/> <br> <mark style="background-color:red;">    if (x + 1 + y < z) {</mark> <br/><br>        return x + y + z + ( 5 );<br/><br>  <mark style="background-color:green;">    } else if (x + 1 + y < z * 2) {</mark> <br/><br>        return x + y + z + ( x + 5 );<br/><br>    } else {<br/><br>        return x + y + z + ( z + 5 );<br/><br>    }<br/><br>}<br/><p/>'        );});
    it('test11', () => {        assert.equal(parseCode('function foo(x, y, z){\n' +            '    let a = x + 1;\n' +            '    let b = a + y;\n' +            '    let c = -1;\n' +            '    \n' +            '    if (b < z) {\n' +            '        c = c + 5 + 0;\n' +            '        return x + y + z + c;\n' +            '    } else if (b < z * 2) {\n' +            '        c = c + x + 5;\n' +            '        return x + y + z + c;\n' +            '    } else {\n' +            '        c = c + z + 5;\n' +            '        return x + y + z + c;\n' +            '    }\n' +            '}\n','1|2|3'),        '<p><br>function foo(x, y, z){<br/> <br> <mark style="background-color:red;">    if (x + 1 + y < z) {</mark> <br/><br>        return x + y + z + ( -1 + 5 );<br/><br>  <mark style="background-color:green;">    } else if (x + 1 + y < z * 2) {</mark> <br/><br>        return x + y + z + ( -1 + x + 5 );<br/><br>    } else {<br/><br>        return x + y + z + ( -1 + z + 5 );<br/><br>    }<br/><br>}<br/><p/>'        );});
    it('test12', () => {        assert.equal(parseCode('function foo(x, y, z){\n' +            '    let a = x + 1;\n' +            '    let b = a + y;\n' +            '    let c = -1;\n' +            '    \n' +            '    if (b < z) \n' +            'return 1;\n' +            ' }\n' ,'1|2|3'),        '<p><br>function foo(x, y, z){<br/> <br> <mark style="background-color:red;">    if (x + 1 + y < z) </mark> <br/><br>return 1;<br/><br> }<br/><p/>'        );});
    it('test13', () => {        assert.equal(parseCode('function foo(x, y, z){\n' +            '    let a = x + 1;\n' +            '    let b = a + y;\n' +            '    let c = -1;\n' +            '    \n' +            '    if (b < z) {\n' +            'let d=2;\n' +            'return d;\n' +            '}\n' +            ' }\n',' 1|2|3'),        '<p><br>function foo(x, y, z){<br/> <br> <mark style="background-color:red;">    if (x + 1 + y < z) {</mark> <br/><br>return 2;<br/><br>}<br/><br> }<br/><p/>'        );});
    it('test14', () => {        assert.equal(parseCode('function foo(x, y, z){\n' +            '    let a = x + 1;\n' +            '    let b = a + y;\n' +            '    let c = -1;\n' +            '    \n' +            '    if (b < z) {\n' +            'let d;\n' +            'return c;\n' +            '}\n' +            ' }\n',' 1|2|3'),        '<p><br>function foo(x, y, z){<br/> <br> <mark style="background-color:red;">    if (x + 1 + y < z) {</mark> <br/><br>return -1;<br/><br>}<br/><br> }<br/><p/>'        );});
    it('test15', () => {        assert.equal(parseCode('function foo(x, y, z){\n' +        '    let a = x + 1;\n' +        '    let b = a + y;\n' +        '    let c = [1,2];\n' +        '    \n' +        '    if (b < z) {\n' +        '        return x + y + z + c[0];\n' +        '   }\n' +        '}\n','1|2|3'),    '<p><br>function foo(x, y, z){<br/> <br> <mark style="background-color:red;">    if (x + 1 + y < z) {</mark> <br/><br>        return x + y + z + 1;<br/><br>   }<br/><br>}<br/><p/>'    );});
    it('test16', () => {        assert.equal(parseCode('function foo(x, y, z){\n' +        '    let a = x + 1;\n' +        '    let b = a + y;\n' +        '    let c = [1,2];\n' +        '    \n' +        '    if (b < z) {\n' +        '                return x + y + z + c[0];\n' +        '    } else if (b < z * 2) {\n' +        '\n' +        'c=[1,3];\n' +        '\n' +        '               return x + y + z + c[1];\n' +        '    } else {\n' +        '\n' +        'c=[1,5];\n' +        '               return x + y + z + c[0];\n' +        '    }\n' +        '}\n',    '1|2|3'),    '<p><br>function foo(x, y, z){<br/> <br> <mark style="background-color:red;">    if (x + 1 + y < z) {</mark> <br/><br>                return x + y + z + 1;<br/><br>  <mark style="background-color:green;">    } else if (x + 1 + y < z * 2) {</mark> <br/><br>               return x + y + z + 3;<br/><br>    } else {<br/><br>               return x + y + z + 1;<br/><br>    }<br/><br>}<br/><p/>' );});
    it('test17', () => {        assert.equal(parseCode('function foo(x, y, z){\n' +        '    let a = x + 1;\n' +        '    let b = a + y;\n' +        '    let c=[1,2];\n' +        'let d=c[0];\n' +        '\n' +        '    \n' +        '    if (b < z) {\n' +        '          ' +        '' +        '      return x + y + z + d;\n' +        '    }\n' +        '}\n',    '1|2|3 '),    '<p><br>function foo(x, y, z){<br/> <br> <mark style="background-color:red;">    if (x + 1 + y < z) {</mark> <br/><br>                return x + y + z + 1;<br/><br>    }<br/><br>}<br/><p/>');});
    it('test18', () => {        assert.equal(parseCode('function foo(x, y, z){\n' +        '    let a = x + 1;\n' +        '    let b = a + y;\n' +        'let c=[1,2];\n' +        '\n' +        '    \n' +        '    if (b < z) {\n' +        'c[0]=5;\n' +        '\n' +        '                return x + y + z + c[0];\n' +        '    }\n' +        '}\n',    '1|2|3'),    '<p><br>function foo(x, y, z){<br/> <br> <mark style="background-color:red;">    if (x + 1 + y < z) {</mark> <br/><br>                return x + y + z + ( 5 );<br/><br>    }<br/><br>}<br/><p/>');});
    it('test19', () => {        assert.equal(parseCode('function foo(x, y, z){\n' +        '    let a = x + 1;\n' +        '    let b = a + y;\n' +        '    let c = [5,7];\n' +        '    \n' +        '    while (a < z) {\n' +        '\n' +        'c=[1,2];\n' +        '\n' +        '        z = c[0] * 2;\n' +        '    }\n' +        '    \n' +        '    return z;\n' +        '}\n',    '1|2|3'),    '<p><br>function foo(x, y, z){<br/><br>    while (x + 1 < z) {<br/><br>        z =( 1 * 2 )<br/><br>    }<br/><br>    return z;<br/><br>}<br/><p/>');});
    it('test20', () => {        assert.equal(parseCode('function foo(){\n' +        '  c[0]=2;\n' +        'return c[0]\n' +        '}\n','' ),        '<p><br>function foo(){<br/><br>return ( 2 );<br/><br>}<br/><p/>');});    it('test21', () => {        assert.equal(parseCode('function foo(x,y){\n' +        'if(x[0]==y[0]){\n' +        'return true;\n' +        '}\n' +        '}','[4,5]|[4,5]' ),        '<p><br>function foo(x,y){<br/><br>  <mark style="background-color:green;">if(x[0] == y[0]){</mark> <br/><br>return true;<br/><br>}<br/><br>}<br/><p/>');});    it('test21', () => {        assert.equal(parseCode('function foo(x,y){\n' +        'x=2;\n' +        'return x;\n' +        '}\n','5|3' ),        '<p><br>function foo(x,y){<br/><br>x=( 2 )<br/><br>return ( 2 );<br/><br>}<br/><p/>');});    it('test22', () => {        assert.equal(parseCode('x=2+1;\n' +        'function foo() {\n' +        'let a=x\n' +        'let b=6;\n' +        'c=a+b\n' +        'return c;\n' +        '}\n','' ),        '<p><br>function foo() {<br/><br>return ( ( 2 + 1 ) + 6 );<br/><br>}<br/><p/>');});    it('test23', () => {        assert.equal(parseCode('function foo(x) {\n' +        'let a=x[0]\n' +        'return a;\n' +        '}','[5,6]' ),        '<p><br>function foo(x) {<br/><br>return x[0];<br/><br>}<br/><p/>');});    });

